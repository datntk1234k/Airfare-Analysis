# -*- coding: utf-8 -*-

"""
Data Processing Pipeline
========================
T·ªïng h·ª£p ƒë·∫ßy ƒë·ªß code t·ª´ 4 notebook g·ªëc, s·∫Øp x·∫øp theo lu·ªìng x·ª≠ l√Ω:
1. Ti·ªÅn x·ª≠ l√Ω & xo√° c·ªôt d∆∞ th·ª´a.
2. Kh√°m ph√° d·ªØ li·ªáu.
3. L·ªçc & ch·ªçn feature.
Sau c√πng, file s·∫Ω l∆∞u dataset ƒë√£ x·ª≠ l√Ω ra `data/processed_data.parquet`.
"""


# === Preprocessing Columns (from 01_preprocessing_columns_full.ipynb) ===

import pandas as pd
import os

# C√†i ƒë·∫∑t hi·ªÉn th·ªã ƒë·∫πp
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 200)
pd.set_option('display.max_colwidth', None)

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a file
RAW_PATH = "D:\\E\\raw_data"

def load_and_prepare(files, drop_airline=False, drop_is_duplicate=False):
    dfs = []
    for file in files:
        df = pd.read_csv(os.path.join(RAW_PATH, file))
        df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")
        
        if drop_airline and "airline" in df.columns:
            df.drop(columns="airline", inplace=True)
        if drop_is_duplicate and "is_duplicate" in df.columns:
            df.drop(columns="is_duplicate", inplace=True)
        
        dfs.append(df)
    return pd.concat(dfs, ignore_index=True)

# 1. Vietjet: xo√° airline & is_duplicate
df_vietjet = load_and_prepare(["vietjet_1.csv", "vietjet_2.csv"],
                              drop_airline=True, drop_is_duplicate=True)

# 2. Vietnam Airlines: xo√° airline
df_vnairlines = load_and_prepare(["VNairlines_1_1.csv", "VNairlines_2_2.csv"],
                                 drop_airline=True)

# 3. Bamboo: gi·ªØ nguy√™n ho√†n to√†n
df_bamboo = load_and_prepare(["BambooAirway.csv"])

# G·ªôp t·∫•t c·∫£
df_all = pd.concat([df_vietjet, df_vnairlines, df_bamboo], ignore_index=True)

# Xem k·∫øt qu·∫£
print("T·ªïng s·ªë d√≤ng sau khi g·ªôp:", len(df_all))
print(df_all.head(10))




# Ki·ªÉm tra c√≥ bao nhi√™u h√£ng bay 
unique_airlines = df_all['operating_airline_name'].dropna().unique()
print("S·ªë l∆∞·ª£ng h√£ng bay duy nh·∫•t trong 'operating_airline_name':", len(unique_airlines))
print("üõ´ Danh s√°ch c√°c h√£ng bay:")
print(unique_airlines)




df_all.drop(columns=['source.name', 'departure_time', 'arrival_time', 'status'], inplace=True)
print("ƒê√£ x√≥a c√°c c·ªôt: source.name, departure_time, arrival_time, status kh·ªèi df_all.")





print("üßæ C√°c c·ªôt hi·ªán c√≥ trong df_all:")
print(df_all.columns.tolist())




df_all.info()



# √âp ki·ªÉu c·ªôt date v·ªÅ datetime
df_all['date'] = pd.to_datetime(df_all['date'], errors='coerce')



# T·∫°o c·ªôt gi·ªù
df_all['hour'] = df_all['date'].dt.hour

# T·∫°o c·ªôt "kho·∫£ng th·ªùi gian bay"
def get_time_slot(hour):
    if 5 <= hour < 12:
        return 'S√°ng'
    elif 12 <= hour < 17:
        return 'Chi·ªÅu'
    elif 17 <= hour < 21:
        return 'T·ªëi'
    else:
        return 'ƒê√™m'

df_all['time_slot'] = df_all['hour'].apply(get_time_slot)



# S·ªë chuy·∫øn bay t·ªïng c·ªông
print("T·ªïng s·ªë chuy·∫øn bay:", len(df_all))

# S·ªë chuy·∫øn theo h√£ng
print("\nS·ªë chuy·∫øn theo h√£ng:")
print(df_all['operating_airline_name'].value_counts())

# Th·ªëng k√™ gi√° v√©
print("\nTh·ªëng k√™ gi√° v√© (price_vnd):")
print(df_all['price_vnd'].describe())



# ƒê·∫£m b·∫£o date ƒë√£ ƒë√∫ng ki·ªÉu datetime
df_all['date'] = pd.to_datetime(df_all['date'], errors='coerce')

# Th√™m c√°c c·ªôt th·ªùi gian
df_all['month'] = df_all['date'].dt.month
df_all['weekday'] = df_all['date'].dt.day_name()
df_all['week'] = df_all['date'].dt.isocalendar().week



print("\nGi√° v√© trung b√¨nh theo th√°ng:")
print(df_all.groupby('month')['price_vnd'].mean().round(0))



print("\nGi√° v√© trung b√¨nh theo ng√†y trong tu·∫ßn:")
print(df_all.groupby('weekday')['price_vnd'].mean().round(0))




print("\nGi√° v√© trung b√¨nh theo tu·∫ßn:")
print(df_all.groupby('week')['price_vnd'].mean().round(0))








# === Data Exploration ‚Äí Part‚ÄØ1 (from 02_data_exploration_part1.ipynb) ===

import pandas as pd
import os

# C√†i ƒë·∫∑t hi·ªÉn th·ªã ƒë·∫πp
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 200)
pd.set_option('display.max_colwidth', None)

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a file
RAW_PATH = "D:\\SUMMER2025\\raw_data"

def load_and_prepare(files, drop_airline=False, drop_is_duplicate=False):
    dfs = []
    for file in files:
        df = pd.read_csv(os.path.join(RAW_PATH, file))
        df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")
        
        if drop_airline and "airline" in df.columns:
            df.drop(columns="airline", inplace=True)
        if drop_is_duplicate and "is_duplicate" in df.columns:
            df.drop(columns="is_duplicate", inplace=True)
        
        dfs.append(df)
    return pd.concat(dfs, ignore_index=True)

# 1. Vietjet: xo√° airline & is_duplicate
df_vietjet = load_and_prepare(["vietjet_1.csv", "vietjet_2.csv"],
                              drop_airline=True, drop_is_duplicate=True)

# 2. Vietnam Airlines: xo√° airline
df_vnairlines = load_and_prepare(["VNairlines_1_1.csv", "VNairlines_2_2.csv"],
                                 drop_airline=True)

# 3. Bamboo: gi·ªØ nguy√™n ho√†n to√†n
df_bamboo = load_and_prepare(["BambooAirway.csv"])

# G·ªôp t·∫•t c·∫£
df_all = pd.concat([df_vietjet, df_vnairlines, df_bamboo], ignore_index=True)

# Xem k·∫øt qu·∫£
print("T·ªïng s·ªë d√≤ng sau khi g·ªôp:", len(df_all))
print(df_all.head(10))



# Ki·ªÉm tra c√≥ bao nhi√™u h√£ng bay 
unique_airlines = df_all['operating_airline_name'].dropna().unique()
print("S·ªë l∆∞·ª£ng h√£ng bay duy nh·∫•t trong 'operating_airline_name':", len(unique_airlines))
print("üõ´ Danh s√°ch c√°c h√£ng bay:")
print(unique_airlines)




df_all.drop(columns=['source.name', 'departure_time', 'arrival_time', 'status'], inplace=True)
print("ƒê√£ x√≥a c√°c c·ªôt: source.name, departure_time, arrival_time, status kh·ªèi df_all.")





print("üßæ C√°c c·ªôt hi·ªán c√≥ trong df_all:")
print(df_all.columns.tolist())




df_all.info()



# √âp ki·ªÉu c·ªôt date v·ªÅ datetime
df_all['date'] = pd.to_datetime(df_all['date'], errors='coerce')



# T·∫°o c·ªôt gi·ªù
df_all['hour'] = df_all['date'].dt.hour

# T·∫°o c·ªôt "kho·∫£ng th·ªùi gian bay"
def get_time_slot(hour):
    if 5 <= hour < 12:
        return 'S√°ng'
    elif 12 <= hour < 17:
        return 'Chi·ªÅu'
    elif 17 <= hour < 21:
        return 'T·ªëi'
    else:
        return 'ƒê√™m'

df_all['time_slot'] = df_all['hour'].apply(get_time_slot)



# ƒê·∫£m b·∫£o date ƒë√£ ƒë√∫ng ki·ªÉu datetime
df_all['date'] = pd.to_datetime(df_all['date'], errors='coerce')

# Th√™m c√°c c·ªôt th·ªùi gian
df_all['month'] = df_all['date'].dt.month
df_all['weekday'] = df_all['date'].dt.day_name()
df_all['week'] = df_all['date'].dt.isocalendar().week



df_all.info()
df_all




# Gi·∫£ s·ª≠ df_all l√† DataFrame ƒë√£ ƒë∆∞·ª£c g·ªôp s·∫µn t·ª´ c√°c file
# Ki·ªÉm tra c√°c c·ªôt c√≥ li√™n quan
print(df_all[['route', 'price_vnd', 'cabin', 'operating_airline_name', 'booking_class', 'fare_code', 'fare_conditions']].head())

# 1. So s√°nh ch√™nh l·ªách gi√° theo h·∫°ng v√© (Economy vs Business)
cabin_avg_price = df_all.groupby('cabin')['price_vnd'].mean().sort_values()
print("\n[1] Gi√° trung b√¨nh theo Cabin:\n", cabin_avg_price.apply(lambda x: f"{x:,.0f} VND"))

# 2. So s√°nh gi√° Economy/Business gi·ªØa c√°c h√£ng c√πng tuy·∫øn
cabin_airline_route = df_all.groupby(['route', 'cabin', 'operating_airline_name'])['price_vnd'].mean().reset_index()
pivot_price_compare = cabin_airline_route.pivot_table(index=['route', 'cabin'], 
                                                       columns='operating_airline_name', 
                                                       values='price_vnd')
print("\n[2] So s√°nh gi√° gi·ªØa c√°c h√£ng tr√™n c√πng tuy·∫øn (theo Cabin):\n", pivot_price_compare.applymap(lambda x: f"{x:,.0f} VND" if pd.notnull(x) else "-"))







# 3. Xem h√£ng n√†o gi√° t·ªët h∆°n cho t·ª´ng h·∫°ng
def better_price(row):
    values = row.dropna()
    if len(values) >= 2:
        return values.idxmin()
    return None

pivot_price_compare['Best_price_airline'] = pivot_price_compare.apply(better_price, axis=1)
print("\n[3] H√£ng c√≥ gi√° t·ªët nh·∫•t theo t·ª´ng tuy·∫øn v√† h·∫°ng:\n", pivot_price_compare[['Best_price_airline']])

# 4. Ph√¢n t√≠ch ƒë·ªô linh ho·∫°t (Booking_Class, Fare_Code, Fare_Conditions)
flex_analysis = df_all.groupby(['booking_class', 'fare_code', 'fare_conditions'])['price_vnd'].agg(['mean', 'count']).sort_values(by='mean')
print("\n[4] Ph√¢n t√≠ch ƒë·ªô linh ho·∫°t:\n", flex_analysis.head(10))  # hi·ªÉn th·ªã 10 d√≤ng ƒë·∫ßu



# ƒê·∫£m b·∫£o c·ªôt ng√†y l√† d·∫°ng datetime
df_all['date'] = pd.to_datetime(df_all['date'])

# ƒê·∫øm s·ªë chuy·∫øn bay theo t·ª´ng ng√†y
flights_per_day = df_all['date'].value_counts().sort_values(ascending=False)

# Hi·ªÉn th·ªã top 10 ng√†y c√≥ nhi·ªÅu chuy·∫øn nh·∫•t
print("Top 10 ng√†y c√≥ nhi·ªÅu chuy·∫øn bay nh·∫•t:")
print(flights_per_day.head(10))




# Trung b√¨nh gi√° v√© theo th√°ng
month_avg_price = df_all.groupby('month')['price_vnd'].mean().sort_values(ascending=False)

print("\n[3] Gi√° v√© trung b√¨nh theo th√°ng (gi·∫£m d·∫ßn):\n")
print(month_avg_price.apply(lambda x: f"{x:,.0f} VND"))

# Th√°ng c√≥ gi√° v√© trung b√¨nh cao nh·∫•t
max_month = month_avg_price.idxmax()
max_price = month_avg_price.max()

print(f"\nTh√°ng c√≥ gi√° v√© trung b√¨nh cao nh·∫•t: Th√°ng {max_month} v·ªõi m·ª©c gi√° trung b√¨nh: {max_price:,.0f} VND")




# Trung b√¨nh gi√° v√© theo th√°ng v√† h√£ng
monthly_airline_price = df_all.groupby(['operating_airline_name', 'month'])['price_vnd'].mean()

# T√¨m th√°ng c√≥ gi√° cao nh·∫•t cho m·ªói h√£ng
highest_month_per_airline = monthly_airline_price.groupby('operating_airline_name').idxmax()
highest_price_per_airline = monthly_airline_price.groupby('operating_airline_name').max()

# G·ªôp k·∫øt qu·∫£
result = pd.DataFrame({
    'Th√°ng cao nh·∫•t': highest_month_per_airline.map(lambda x: x[1]),
    'Gi√° trung b√¨nh cao nh·∫•t (VND)': highest_price_per_airline
})
result['Gi√° trung b√¨nh cao nh·∫•t (VND)'] = result['Gi√° trung b√¨nh cao nh·∫•t (VND)'].apply(lambda x: f"{x:,.0f}")
print("\nTh√°ng c√≥ gi√° v√© trung b√¨nh cao nh·∫•t theo t·ª´ng h√£ng:\n")
print(result)




# T√≠nh trung b√¨nh gi√° v√© theo h√£ng bay
avg_price_by_airline = df_all.groupby("operating_airline_name")["price_vnd"].mean().sort_values()

# Hi·ªÉn th·ªã h√£ng c√≥ gi√° v√© trung b√¨nh r·∫ª nh·∫•t
print("H√£ng c√≥ gi√° v√© trung b√¨nh r·∫ª nh·∫•t:")
print(avg_price_by_airline.head(1).apply(lambda x: f"{x:,.0f} VND"))

# Hi·ªÉn th·ªã to√†n b·ªô ƒë·ªÉ so s√°nh
print("\nGi√° v√© trung b√¨nh theo t·ª´ng h√£ng:")
print(avg_price_by_airline.apply(lambda x: f"{x:,.0f} VND"))




avg_prices = df_all.groupby(['booking_class', 'fare_code'])["price_vnd"].mean().sort_values()
print(avg_prices.apply(lambda x: f"{x:,.0f} VND"))



# === Data Exploration ‚Äí Part‚ÄØ2 (from 02_data_exploration_part2.ipynb) ===

import pandas as pd
import os

# C√†i ƒë·∫∑t hi·ªÉn th·ªã ƒë·∫πp
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 200)
pd.set_option('display.max_colwidth', None)

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a file
RAW_PATH = "E:\\DATA-PROCESSING\\Du_an_tot_nghiep\\raw_data\\raw_data"

def load_and_prepare(files, drop_airline=False, drop_is_duplicate=False):
    dfs = []
    for file in files:
        df = pd.read_csv(os.path.join(RAW_PATH, file))
        df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")
        
        if drop_airline and "airline" in df.columns:
            df.drop(columns="airline", inplace=True)
        if drop_is_duplicate and "is_duplicate" in df.columns:
            df.drop(columns="is_duplicate", inplace=True)
        
        dfs.append(df)
    return pd.concat(dfs, ignore_index=True)

# 1. Vietjet: xo√° airline & is_duplicate
df_vietjet = load_and_prepare(["vietjet_1.csv", "vietjet_2.csv"],
                              drop_airline=True, drop_is_duplicate=True)

# 2. Vietnam Airlines: xo√° airline
df_vnairlines = load_and_prepare(["VNairlines_1_1.csv", "VNairlines_2_2.csv"],
                                 drop_airline=True)

# 3. Bamboo: gi·ªØ nguy√™n ho√†n to√†n
df_bamboo = load_and_prepare(["BambooAirway.csv"])

# G·ªôp t·∫•t c·∫£
df_all = pd.concat([df_vietjet, df_vnairlines, df_bamboo], ignore_index=True)

# Xem k·∫øt qu·∫£
print("T·ªïng s·ªë d√≤ng sau khi g·ªôp:", len(df_all))
print(df_all.head(10))



# Ki·ªÉm tra c√≥ bao nhi√™u h√£ng bay 
unique_airlines = df_all['operating_airline_name'].dropna().unique()
print("S·ªë l∆∞·ª£ng h√£ng bay duy nh·∫•t trong 'operating_airline_name':", len(unique_airlines))
print("üõ´ Danh s√°ch c√°c h√£ng bay:")
print(unique_airlines)




df_all.drop(columns=['source.name', 'departure_time', 'arrival_time', 'status'], inplace=True)
print("ƒê√£ x√≥a c√°c c·ªôt: source.name, departure_time, arrival_time, status kh·ªèi df_all.")





print("üßæ C√°c c·ªôt hi·ªán c√≥ trong df_all:")
print(df_all.columns.tolist())




df_all.info()



# √âp ki·ªÉu c·ªôt date v·ªÅ datetime
df_all['date'] = pd.to_datetime(df_all['date'], errors='coerce')



# T·∫°o c·ªôt gi·ªù
df_all['hour'] = df_all['date'].dt.hour

# T·∫°o c·ªôt "kho·∫£ng th·ªùi gian bay"
def get_time_slot(hour):
    if 5 <= hour < 12:
        return 'S√°ng'
    elif 12 <= hour < 17:
        return 'Chi·ªÅu'
    elif 17 <= hour < 21:
        return 'T·ªëi'
    else:
        return 'ƒê√™m'

df_all['time_slot'] = df_all['hour'].apply(get_time_slot)



# ƒê·∫£m b·∫£o date ƒë√£ ƒë√∫ng ki·ªÉu datetime
df_all['date'] = pd.to_datetime(df_all['date'], errors='coerce')

# Th√™m c√°c c·ªôt th·ªùi gian
df_all['month'] = df_all['date'].dt.month
df_all['weekday'] = df_all['date'].dt.day_name()
df_all['week'] = df_all['date'].dt.isocalendar().week



df_all.info()
df_all



# S·ªë chuy·∫øn bay t·ªïng c·ªông
print("T·ªïng s·ªë chuy·∫øn bay:", len(df_all))

# S·ªë chuy·∫øn theo h√£ng
print("\nS·ªë chuy·∫øn theo h√£ng:")
print(df_all['operating_airline_name'].value_counts())

# Th·ªëng k√™ gi√° v√©
print("\nTh·ªëng k√™ gi√° v√© (price_vnd):")
print(df_all['price_vnd'].describe())



print("\nGi√° v√© trung b√¨nh theo th√°ng:")
print(df_all.groupby('month')['price_vnd'].mean().round(0))



print("\nGi√° v√© trung b√¨nh theo ng√†y trong tu·∫ßn:")
print(df_all.groupby('weekday')['price_vnd'].mean().round(0))



print("\nGi√° v√© trung b√¨nh theo tu·∫ßn:")
print(df_all.groupby('week')['price_vnd'].mean().round(0))




# Gi·∫£ s·ª≠ df_all l√† DataFrame ƒë√£ ƒë∆∞·ª£c g·ªôp s·∫µn t·ª´ c√°c file
# Ki·ªÉm tra c√°c c·ªôt c√≥ li√™n quan
print(df_all[['route', 'price_vnd', 'cabin', 'operating_airline_name', 'booking_class', 'fare_code', 'fare_conditions']].head())

# 1. So s√°nh ch√™nh l·ªách gi√° theo h·∫°ng v√© (Economy vs Business)
cabin_avg_price = df_all.groupby('cabin')['price_vnd'].mean().sort_values()
print("\n[1] Gi√° trung b√¨nh theo Cabin:\n", cabin_avg_price.apply(lambda x: f"{x:,.0f} VND"))

# 2. So s√°nh gi√° Economy/Business gi·ªØa c√°c h√£ng c√πng tuy·∫øn
cabin_airline_route = df_all.groupby(['route', 'cabin', 'operating_airline_name'])['price_vnd'].mean().reset_index()
pivot_price_compare = cabin_airline_route.pivot_table(index=['route', 'cabin'], 
                                                       columns='operating_airline_name', 
                                                       values='price_vnd')
print("\n[2] So s√°nh gi√° gi·ªØa c√°c h√£ng tr√™n c√πng tuy·∫øn (theo Cabin):\n", pivot_price_compare.applymap(lambda x: f"{x:,.0f} VND" if pd.notnull(x) else "-"))







# 3. Xem h√£ng n√†o gi√° t·ªët h∆°n cho t·ª´ng h·∫°ng
def better_price(row):
    values = row.dropna()
    if len(values) >= 2:
        return values.idxmin()
    return None

pivot_price_compare['Best_price_airline'] = pivot_price_compare.apply(better_price, axis=1)
print("\n[3] H√£ng c√≥ gi√° t·ªët nh·∫•t theo t·ª´ng tuy·∫øn v√† h·∫°ng:\n", pivot_price_compare[['Best_price_airline']])

# 4. Ph√¢n t√≠ch ƒë·ªô linh ho·∫°t (Booking_Class, Fare_Code, Fare_Conditions)
flex_analysis = df_all.groupby(['booking_class', 'fare_code', 'fare_conditions'])['price_vnd'].agg(['mean', 'count']).sort_values(by='mean')
print("\n[4] Ph√¢n t√≠ch ƒë·ªô linh ho·∫°t:\n", flex_analysis.head(10))  # hi·ªÉn th·ªã 10 d√≤ng ƒë·∫ßu



# ƒê·∫£m b·∫£o c·ªôt ng√†y l√† d·∫°ng datetime
df_all['date'] = pd.to_datetime(df_all['date'])

# ƒê·∫øm s·ªë chuy·∫øn bay theo t·ª´ng ng√†y
flights_per_day = df_all['date'].value_counts().sort_values(ascending=False)

# Hi·ªÉn th·ªã top 10 ng√†y c√≥ nhi·ªÅu chuy·∫øn nh·∫•t
print("Top 10 ng√†y c√≥ nhi·ªÅu chuy·∫øn bay nh·∫•t:")
print(flights_per_day.head(10))




# Trung b√¨nh gi√° v√© theo th√°ng
month_avg_price = df_all.groupby('month')['price_vnd'].mean().sort_values(ascending=False)

print("\n[3] Gi√° v√© trung b√¨nh theo th√°ng (gi·∫£m d·∫ßn):\n")
print(month_avg_price.apply(lambda x: f"{x:,.0f} VND"))

# Th√°ng c√≥ gi√° v√© trung b√¨nh cao nh·∫•t
max_month = month_avg_price.idxmax()
max_price = month_avg_price.max()

print(f"\nTh√°ng c√≥ gi√° v√© trung b√¨nh cao nh·∫•t: Th√°ng {max_month} v·ªõi m·ª©c gi√° trung b√¨nh: {max_price:,.0f} VND")




# Trung b√¨nh gi√° v√© theo th√°ng v√† h√£ng
monthly_airline_price = df_all.groupby(['operating_airline_name', 'month'])['price_vnd'].mean()

# T√¨m th√°ng c√≥ gi√° cao nh·∫•t cho m·ªói h√£ng
highest_month_per_airline = monthly_airline_price.groupby('operating_airline_name').idxmax()
highest_price_per_airline = monthly_airline_price.groupby('operating_airline_name').max()

# G·ªôp k·∫øt qu·∫£
result = pd.DataFrame({
    'Th√°ng cao nh·∫•t': highest_month_per_airline.map(lambda x: x[1]),
    'Gi√° trung b√¨nh cao nh·∫•t (VND)': highest_price_per_airline
})
result['Gi√° trung b√¨nh cao nh·∫•t (VND)'] = result['Gi√° trung b√¨nh cao nh·∫•t (VND)'].apply(lambda x: f"{x:,.0f}")
print("\nTh√°ng c√≥ gi√° v√© trung b√¨nh cao nh·∫•t theo t·ª´ng h√£ng:\n")
print(result)




# T√≠nh trung b√¨nh gi√° v√© theo h√£ng bay
avg_price_by_airline = df_all.groupby("operating_airline_name")["price_vnd"].mean().sort_values()

# Hi·ªÉn th·ªã h√£ng c√≥ gi√° v√© trung b√¨nh r·∫ª nh·∫•t
print("H√£ng c√≥ gi√° v√© trung b√¨nh r·∫ª nh·∫•t:")
print(avg_price_by_airline.head(1).apply(lambda x: f"{x:,.0f} VND"))

# Hi·ªÉn th·ªã to√†n b·ªô ƒë·ªÉ so s√°nh
print("\nGi√° v√© trung b√¨nh theo t·ª´ng h√£ng:")
print(avg_price_by_airline.apply(lambda x: f"{x:,.0f} VND"))




avg_prices = df_all.groupby(['booking_class', 'fare_code'])["price_vnd"].mean().sort_values()
print(avg_prices.apply(lambda x: f"{x:,.0f} VND"))



#%%
# t·ªïng c√°c chuy·∫øn bay theo H√ÄNH TR√åNH
print(df_all['route'].unique())

route_counts = df_all['route'].value_counts().reset_index()
route_counts.columns = ['route', 'flight_count']

print("T·ªïng c√°c chuy·∫øn bay theo H√ÄNH TR√åNH:")

route_counts['flight_count'] = route_counts['flight_count'].astype(str) + ' chuy·∫øn'

print(route_counts[['route', 'flight_count']])
print(f"Tuy·∫øn nhi·ªÅu l∆∞·ª£t bay nh·∫•t: {route_counts['flight_count'].max()}")
print(f"Tuy·∫øn √≠t l∆∞·ª£t bay nh·∫•t: {route_counts['flight_count'].min()}")



route_price_avg = df_all.groupby('route')['price_vnd'].mean().reset_index()

min_price_row = route_price_avg.loc[route_price_avg['price_vnd'].idxmin()]

max_price_row = route_price_avg.loc[route_price_avg['price_vnd'].idxmax()]

print(f"Tuy·∫øn bay c√≥ gi√° v√© trung b√¨nh r·∫ª nh·∫•t: {min_price_row['route']} v·ªõi gi√° {min_price_row['price_vnd']:.2f} VND")
print(f"Tuy·∫øn bay c√≥ gi√° v√© trung b√¨nh cao nh·∫•t: {max_price_row['route']} v·ªõi gi√° {max_price_row['price_vnd']:.2f} VND")



#%%
# T√≠nh gi√° v√© trung b√¨nh theo t·ª´ng tuy·∫øn
route_price_avg = df_all.groupby('route')['price_vnd'].mean().reset_index()

# S·∫Øp x·∫øp gi√° v√© trung b√¨nh gi·∫£m d·∫ßn
top_highest = route_price_avg.sort_values(by='price_vnd', ascending=False).head(5)

# S·∫Øp x·∫øp gi√° v√© trung b√¨nh tƒÉng d·∫ßn
top_lowest = route_price_avg.sort_values(by='price_vnd', ascending=True).head(5)

print("Top 5 tuy·∫øn bay c√≥ gi√° v√© trung b√¨nh cao nh·∫•t:")
print(top_highest)

print("\nTop 5 tuy·∫øn bay c√≥ gi√° v√© trung b√¨nh th·∫•p nh·∫•t:")
print(top_lowest)



#%%

df_all['date'] = pd.to_datetime(df_all['date'], errors='coerce')

# Danh s√°ch ng√†y l·ªÖ l·ªõn Vi·ªát Nam
holidays = [
    '2025-01-01',  # T·∫øt D∆∞∆°ng l·ªãch
    '2025-02-10',  # 29 T·∫øt
    '2025-02-11',  # 30 T·∫øt
    '2025-02-12',  # M√πng 1
    '2025-02-13',  # M√πng 2
    '2025-02-14',  # M√πng 3
    '2025-02-15',  # M√πng 4
    '2025-02-16',  # M√πng 5
    '2025-04-30',  # Gi·∫£i ph√≥ng mi·ªÅn Nam
    '2025-05-01',  # Qu·ªëc t·∫ø Lao ƒë·ªông
    '2025-09-02'   # Qu·ªëc kh√°nh
]

holidays = pd.to_datetime(holidays)

df_all['tag_ngay'] = df_all['date'].apply(lambda x: 'Ng√†y l·ªÖ' if x in holidays else 'Ng√†y b√¨nh th∆∞·ªùng')

le_df = df_all[df_all['tag_ngay'] == 'Ng√†y l·ªÖ']
print(le_df[['date', 'tag_ngay']])




#%%
# M√¥ t·∫£ s√¢n bay
airport_dict = {
    'DAD': 'S√¢n bay qu·ªëc t·∫ø ƒê√† N·∫µng',
    'HAN': 'S√¢n bay qu·ªëc t·∫ø N·ªôi B√†i',
    'HPH': 'S√¢n bay qu·ªëc t·∫ø C√°t Bi',
    'SGN': 'S√¢n bay qu·ªëc t·∫ø T√¢n S∆°n Nh·∫•t',
    'CXR': 'S√¢n bay qu·ªëc t·∫ø Cam Ranh',
    'DLI': 'S√¢n bay Li√™n Kh∆∞∆°ng',
    'HUI': 'S√¢n bay Ph√∫ B√†i',
    'PQC': 'S√¢n bay qu·ªëc t·∫ø Ph√∫ Qu·ªëc',
    'UIH': 'S√¢n bay Ph√π C√°t'
}

# H√†m chuy·ªÉn ƒë·ªïi route th√†nh t√™n ƒë·∫ßy ƒë·ªß
def replace_route_with_names(route):
    try:
        dep, arr = route.split('_')
        dep_name = airport_dict.get(dep, dep)
        arr_name = airport_dict.get(arr, arr)
        return f"{dep_name} - {arr_name}"
    except:
        return route  # Gi·ªØ nguy√™n n·∫øu c√≥ l·ªói

df_all['route_full_name'] = df_all['route'].apply(replace_route_with_names)

# Ki·ªÉm tra k·∫øt qu·∫£
print(df_all[['route', 'route_full_name']].head(10))

df_all.rename(columns={'route_full_name': 'description'}, inplace=True)



# T√≠nh gi√° g·ªëc (net_price) v√† t·ª∑ l·ªá thu·∫ø tr√™n t·ªïng gi√°
df_all['net_price'] = df_all['price_vnd'] - df_all['taxes']
df_all['tax_ratio'] = df_all['taxes'] / df_all['price_vnd']
display(df_all[['price_vnd', 'taxes', 'net_price', 'tax_ratio']].sample(5))




#Ph√¢n lo·∫°i v√© th√†nh Economy / Premium / Business
def infer_fare_type(row):
    code = str(row['fare_code']).upper()
    cond = str(row['fare_conditions']).upper()
    if any(k in cond for k in ['BUS', 'PRE33', 'PEN33']) or code.startswith('B'):
        return 'Business'
    elif any(k in cond for k in ['PRE', 'FLE']) or code.startswith('E'):
        return 'Premium'
    elif any(k in cond for k in ['PEN', 'ECO']) or code.startswith('Y') or code.startswith('Z'):
        return 'Economy'
    else:
        return 'Kh√¥ng r√µ'

df_all['fare_type'] = df_all.apply(infer_fare_type, axis=1)
display(df_all[['fare_code', 'fare_conditions', 'fare_type']].sample(10))





#Tuy·∫øn c√≥ m·ª©c thu·∫ø trung b√¨nh cao nh·∫•t
avg_tax_by_route = df_all.groupby('route')['taxes'].mean().reset_index().sort_values(by='taxes', ascending=False)
print ("Tuy·∫øn c√≥ m·ª©c thu·∫ø trung b√¨nh cao nh·∫•t: \n")
print(avg_tax_by_route)



##T·ª∑ l·ªá t·ª´ng fare_type trong m·ªói h√£ng
fare_type_ratio = df_all.groupby(['operating_airline_name', 'fare_type'])['price_vnd'].count().reset_index()
fare_type_ratio = fare_type_ratio.pivot(index='operating_airline_name', columns='fare_type', values='price_vnd').fillna(0)
fare_type_ratio = fare_type_ratio.div(fare_type_ratio.sum(axis=1), axis=0)
print('T·ª∑ l·ªá t·ª´ng lo·∫°i v√© m·ªói h√£ng: \n')
fare_type_ratio



#Gi√° cao nh·∫•t theo lo·∫°i v√© c·ªßa t·ª´ng h√£ng
max_price_by_faretype = df_all.groupby(['operating_airline_name', 'fare_type'])['price_vnd'].max().reset_index()
max_price_by_faretype



price_std = df_all.groupby('route')['price_vnd'].std()
df_all['price_std'] = df_all['route'].map(price_std)

# G√°n nh√£n m·ª©c bi·∫øn ƒë·ªông (cao / trung b√¨nh / th·∫•p)
df_all['price_volatility'] = pd.qcut(df_all['price_std'], q=3, labels=['·ªîn ƒë·ªãnh', 'Trung b√¨nh', 'Bi·∫øn ƒë·ªông cao'])

display(df_all[['route', 'price_vnd', 'price_std', 'price_volatility']].sample(5))




# === Feature Filtering & Selection (from 03_feature_filtering_full.ipynb) ===

import pandas as pd
import os

# C√†i ƒë·∫∑t hi·ªÉn th·ªã ƒë·∫πp
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 200)
pd.set_option('display.max_colwidth', None)

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a file
RAW_PATH = "/Users/nthanhdat/Documents/Fpt_Polytechnic/Graduation_Project/data_pipeline/raw_data"

def load_and_prepare(files, drop_airline=False, drop_is_duplicate=False):
    dfs = []
    for file in files:
        df = pd.read_csv(os.path.join(RAW_PATH, file))
        df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")
        
        if drop_airline and "airline" in df.columns:
            df.drop(columns="airline", inplace=True)
        if drop_is_duplicate and "is_duplicate" in df.columns:
            df.drop(columns="is_duplicate", inplace=True)
        
        dfs.append(df)
    return pd.concat(dfs, ignore_index=True)

# 1. Vietjet: xo√° airline & is_duplicate
df_vietjet = load_and_prepare(["vietjet_1.csv", "vietjet_2.csv"],
                              drop_airline=True, drop_is_duplicate=True)

# 2. Vietnam Airlines: xo√° airline
df_vnairlines = load_and_prepare(["VNairlines_1_1.csv", "VNairlines_2_2.csv"],
                                 drop_airline=True)

# 3. Bamboo: gi·ªØ nguy√™n ho√†n to√†n
df_bamboo = load_and_prepare(["BambooAirway.csv"])

# G·ªôp t·∫•t c·∫£
df_all = pd.concat([df_vietjet, df_vnairlines, df_bamboo], ignore_index=True)

# Xem k·∫øt qu·∫£
print("T·ªïng s·ªë d√≤ng sau khi g·ªôp:", len(df_all))
print(df_all.head(10))




# Status b·ªè v√¨ ch·ª©a soure file th√¥i kh√¥ng c√≥ th√¥ng tin g√¨ kh√°c
# C·ªôt flight_id gi·ªØ
flight_id_counts = df_all['flight_id'].value_counts()
print(flight_id_counts.head(10))  # Xem top 10 chuy·∫øn b·ªã tr√πng

df_dupes = df_all[df_all['flight_id'] == "SEG-VN1341-CXRSGN-2025-06-14-0840"]

print("‚úÖ S·ªë b·∫£n ghi:", len(df_dupes))
print("‚úÖ S·ªë m·ª©c gi√° kh√°c nhau:", df_dupes['price_vnd'].nunique())
print("ü™ô C√°c m·ª©c gi√°:")
print(df_dupes['price_vnd'].unique())







#### C·ªôt departure_time arrival_time b·ªè
# Ki·ªÉm tra t·ªïng s·ªë d√≤ng
total_rows = len(df_all)

# ƒê·∫øm s·ªë l∆∞·ª£ng NaN trong t·ª´ng c·ªôt
departure_missing = df_all['departure_time'].isna().sum()
arrival_missing = df_all['arrival_time'].isna().sum()

# In k·∫øt qu·∫£
print(f"üìå T·ªïng s·ªë d√≤ng: {total_rows}")
print(f"üõ´ 'departure_time' b·ªã thi·∫øu: {departure_missing} d√≤ng ({departure_missing / total_rows:.2%})")
print(f"üõ¨ 'arrival_time' b·ªã thi·∫øu:   {arrival_missing} d√≤ng ({arrival_missing / total_rows:.2%})")

has_departure_data = df_all['departure_time'].notna().any()
has_arrival_data = df_all['arrival_time'].notna().any()

print("‚úÖ C√≥ d·ªØ li·ªáu departure_time kh√¥ng?:", has_departure_data)
print("‚úÖ C√≥ d·ªØ li·ªáu arrival_time kh√¥ng?:", has_arrival_data)

 



# ƒêo·∫°n code ki·ªÉm tra 5 c·ªôt: quota, status, service_code, fare_conditions, operating_airline_code c√≥ n√™n x√≥a kh√¥ng ?
# K·∫øt qu·∫£ status l√† x√≥a 
columns_to_check = ['quota', 'status', 'service_code', 'fare_conditions', 'operating_airline_code']

total_rows = len(df_all)

for col in columns_to_check:
    print(f"\nüîç C·ªôt: {col}")
    if col not in df_all.columns:
        print("‚ùó C·ªôt kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu.")
        continue

    unique_vals = df_all[col].dropna().unique()
    unique_count = len(unique_vals)
    null_count = df_all[col].isna().sum()
    null_percent = null_count / total_rows * 100

    print(f"‚Ä¢ S·ªë gi√° tr·ªã kh√°c nhau (unique): {unique_count}")
    print(f"‚Ä¢ S·ªë d√≤ng b·ªã thi·∫øu (NaN): {null_count} / {total_rows} ({null_percent:.2f}%)")
    print(f"‚Ä¢ M·ªôt v√†i gi√° tr·ªã ƒë·∫ßu ti√™n: {unique_vals[:5]}")

    # G·ª£i √Ω gi·ªØ/xo√° ƒë∆°n gi·∫£n
    if unique_count == 1 and null_percent < 10:
        print("üëâ G·ª£i √Ω: ‚ùå C√≥ th·ªÉ X√ìA (ch·ªâ c√≥ 1 gi√° tr·ªã)")
    elif null_percent > 95:
        print("üëâ G·ª£i √Ω: ‚ùå C√≥ th·ªÉ X√ìA (qu√° nhi·ªÅu d·ªØ li·ªáu thi·∫øu)")
    else:
        print("üëâ G·ª£i √Ω: ‚úÖ C√ÇN NH·∫ÆC GI·ªÆ (c√≥ th√¥ng tin ph√¢n bi·ªát)")





# === Save processed dataset ===
try:
    processed_df.to_parquet("data/processed_data.parquet", index=False)
    print("‚úÖ Processed data saved to data/processed_data.parquet")
except NameError:
    print("‚ö†Ô∏è  Variable 'processed_df' not found. Ensure your last step assigns the final DataFrame to 'processed_df'.")

# === Processing Functions (from 04_processing_functions.py) ===
#%%
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os

file_path = r'D:\Fpt\D·ª± √°n t·ªët nghi·ªáp\Source\raw_data'
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 200)
pd.set_option('display.max_colwidth', None)


def load_and_prepare(files, drop_airline=False, drop_is_duplicate=False):
    dfs = []
    for file in files:
        df = pd.read_csv(os.path.join(file_path, file))
        df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")

        if drop_airline and "airline" in df.columns:
            df.drop(columns="airline", inplace=True)
        if drop_is_duplicate and "is_duplicate" in df.columns:
            df.drop(columns="is_duplicate", inplace=True)

        dfs.append(df)
    return pd.concat(dfs, ignore_index=True)


# 1. Vietjet: xo√° airline & is_duplicate
df_vietjet = load_and_prepare(["vietjet_1.csv", "vietjet_2.csv"],
                              drop_airline=True, drop_is_duplicate=True)

# 2. Vietnam Airlines: xo√° airline
df_vnairlines = load_and_prepare(["VNairlines_1_1.csv", "VNairlines_2_2.csv"],
                                 drop_airline=True)

# 3. Bamboo: gi·ªØ nguy√™n ho√†n to√†n
df_bamboo = load_and_prepare(["BambooAirway.csv"])

# G·ªôp t·∫•t c·∫£
df_all = pd.concat([df_vietjet, df_vnairlines, df_bamboo], ignore_index=True)

# Xem k·∫øt qu·∫£
print("T·ªïng s·ªë d√≤ng sau khi g·ªôp:", len(df_all))
print(df_all.head(10))

#%%
# t·ªïng c√°c chuy·∫øn bay theo H√ÄNH TR√åNH
print(df_all['route'].unique())

route_counts = df_all['route'].value_counts().reset_index()
route_counts.columns = ['route', 'flight_count']

print("T·ªïng c√°c chuy·∫øn bay theo H√ÄNH TR√åNH:")

route_counts['flight_count'] = route_counts['flight_count'].astype(str) + ' chuy·∫øn'

print(route_counts[['route', 'flight_count']])
print(f"Tuy·∫øn nhi·ªÅu l∆∞·ª£t bay nh·∫•t: {route_counts['flight_count'].max()}")
print(f"Tuy·∫øn √≠t l∆∞·ª£t bay nh·∫•t: {route_counts['flight_count'].min()}")
#%%
route_price_avg = df_all.groupby('route')['price_vnd'].mean().reset_index()

min_price_row = route_price_avg.loc[route_price_avg['price_vnd'].idxmin()]

max_price_row = route_price_avg.loc[route_price_avg['price_vnd'].idxmax()]

print(f"Tuy·∫øn bay c√≥ gi√° v√© trung b√¨nh r·∫ª nh·∫•t: {min_price_row['route']} v·ªõi gi√° {min_price_row['price_vnd']:.2f} VND")
print(f"Tuy·∫øn bay c√≥ gi√° v√© trung b√¨nh cao nh·∫•t: {max_price_row['route']} v·ªõi gi√° {max_price_row['price_vnd']:.2f} VND")


#%%
# T√≠nh gi√° v√© trung b√¨nh theo t·ª´ng tuy·∫øn
route_price_avg = df_all.groupby('route')['price_vnd'].mean().reset_index()

# S·∫Øp x·∫øp gi√° v√© trung b√¨nh gi·∫£m d·∫ßn
top_highest = route_price_avg.sort_values(by='price_vnd', ascending=False).head(5)

# S·∫Øp x·∫øp gi√° v√© trung b√¨nh tƒÉng d·∫ßn
top_lowest = route_price_avg.sort_values(by='price_vnd', ascending=True).head(5)

print("Top 5 tuy·∫øn bay c√≥ gi√° v√© trung b√¨nh cao nh·∫•t:")
print(top_highest)

print("\nTop 5 tuy·∫øn bay c√≥ gi√° v√© trung b√¨nh th·∫•p nh·∫•t:")
print(top_lowest)
#%%

df_all['date'] = pd.to_datetime(df_all['date'], errors='coerce')

# Danh s√°ch ng√†y l·ªÖ l·ªõn Vi·ªát Nam
holidays = [
    '2025-01-01',  # T·∫øt D∆∞∆°ng l·ªãch
    '2025-02-10',  # 29 T·∫øt
    '2025-02-11',  # 30 T·∫øt
    '2025-02-12',  # M√πng 1
    '2025-02-13',  # M√πng 2
    '2025-02-14',  # M√πng 3
    '2025-02-15',  # M√πng 4
    '2025-02-16',  # M√πng 5
    '2025-04-30',  # Gi·∫£i ph√≥ng mi·ªÅn Nam
    '2025-05-01',  # Qu·ªëc t·∫ø Lao ƒë·ªông
    '2025-09-02'   # Qu·ªëc kh√°nh
]

holidays = pd.to_datetime(holidays)

df_all['tag_ngay'] = df_all['date'].apply(lambda x: 'Ng√†y l·ªÖ' if x in holidays else 'Ng√†y b√¨nh th∆∞·ªùng')

le_df = df_all[df_all['tag_ngay'] == 'Ng√†y l·ªÖ']
print(le_df[['date', 'tag_ngay']])
#%%
# M√¥ t·∫£ s√¢n bay
airport_dict = {
    'DAD': 'S√¢n bay qu·ªëc t·∫ø ƒê√† N·∫µng',
    'HAN': 'S√¢n bay qu·ªëc t·∫ø N·ªôi B√†i',
    'HPH': 'S√¢n bay qu·ªëc t·∫ø C√°t Bi',
    'SGN': 'S√¢n bay qu·ªëc t·∫ø T√¢n S∆°n Nh·∫•t',
    'CXR': 'S√¢n bay qu·ªëc t·∫ø Cam Ranh',
    'DLI': 'S√¢n bay Li√™n Kh∆∞∆°ng',
    'HUI': 'S√¢n bay Ph√∫ B√†i',
    'PQC': 'S√¢n bay qu·ªëc t·∫ø Ph√∫ Qu·ªëc',
    'UIH': 'S√¢n bay Ph√π C√°t'
}

# H√†m chuy·ªÉn ƒë·ªïi route th√†nh t√™n ƒë·∫ßy ƒë·ªß
def replace_route_with_names(route):
    try:
        dep, arr = route.split('_')
        dep_name = airport_dict.get(dep, dep)
        arr_name = airport_dict.get(arr, arr)
        return f"{dep_name} - {arr_name}"
    except:
        return route  # Gi·ªØ nguy√™n n·∫øu c√≥ l·ªói

df_all['route_full_name'] = df_all['route'].apply(replace_route_with_names)

# Ki·ªÉm tra k·∫øt qu·∫£
print(df_all[['route', 'route_full_name']].head(10))

df_all.rename(columns={'route_full_name': 'description'}, inplace=True)
